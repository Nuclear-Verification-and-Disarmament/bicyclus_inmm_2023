"""Data needed to recreate the Pakistan fissile material program.

The dataframes are hardcoded to avoid time-consuming I/O operations.
"""

import numpy as np
import pandas as pd


def cs137_df():
    """Fraction of Cs137 in spent fuel versus the specific burnup.

    Fraction of Cs137 in spent fuel (in mass fractions) versus the specific
    burnup (in thermal MWd/kgHM). Obtained from Serpent2 simulations of the
    Savannah River Site PHWR in Mk15 configuration.
    """
    df = pd.DataFrame(
        columns=["burnup", "fraction"],
        dtype=float,
        data=[
            [4.00020000e-01, 1.49135665e-05],
            [4.22466000e-01, 1.57517774e-05],
            [4.44916000e-01, 1.65903546e-05],
            [4.67368000e-01, 1.74293507e-05],
            [4.89818000e-01, 1.82682421e-05],
            [5.12270000e-01, 1.91057200e-05],
            [5.34717000e-01, 1.99445590e-05],
            [5.57170000e-01, 2.07822987e-05],
            [5.79620000e-01, 2.16211377e-05],
            [6.02067000e-01, 2.24604479e-05],
            [6.24519000e-01, 2.32991823e-05],
            [6.46970000e-01, 2.41365031e-05],
            [6.69418000e-01, 2.49766509e-05],
            [6.91871000e-01, 2.58143382e-05],
            [7.14317000e-01, 2.66546431e-05],
            [7.36768000e-01, 2.74926445e-05],
            [7.59219000e-01, 2.83326353e-05],
            [7.81665000e-01, 2.91719979e-05],
            [8.04120000e-01, 3.00121981e-05],
            [8.26567000e-01, 3.08516174e-05],
            [8.49016000e-01, 3.16917173e-05],
            [8.71466000e-01, 3.25321313e-05],
            [8.93917000e-01, 3.33726500e-05],
            [9.16367000e-01, 3.42130117e-05],
            [9.38818000e-01, 3.50534780e-05],
            [9.61271000e-01, 3.58947820e-05],
            [9.83719000e-01, 3.67353531e-05],
            [1.00617000e00, 3.75768141e-05],
            [1.02862000e00, 3.84156052e-05],
            [1.05107000e00, 3.92549722e-05],
            [1.07352000e00, 4.00943915e-05],
            [1.09597000e00, 4.09338631e-05],
            [1.11842000e00, 4.17734395e-05],
            [1.14086000e00, 4.26133300e-05],
            [1.16332000e00, 4.34533252e-05],
            [1.18578000e00, 4.42924827e-05],
            [1.20822000e00, 4.51330014e-05],
            [1.23067000e00, 4.59732584e-05],
            [1.25312000e00, 4.68128871e-05],
            [1.27556000e00, 4.76527252e-05],
            [1.29802000e00, 4.84919875e-05],
            [1.32046000e00, 4.93327679e-05],
            [1.34292000e00, 5.01741243e-05],
            [1.36537000e00, 5.10146430e-05],
            [1.38782000e00, 5.18544288e-05],
            [1.41026000e00, 5.26956422e-05],
            [1.43272000e00, 5.35379976e-05],
            [1.45516000e00, 5.43766884e-05],
            [1.47762000e00, 5.52185203e-05],
            [1.50007000e00, 5.60603522e-05],
        ],
    )
    return df


def pu_df():
    """Fraction of Pu in spent fuel versus the specific burnup.

    Fraction of Pu in spent fuel (in units of gPu per kgU in spent fuel)
    versus the specific burnup (in thermal MWd/kgHM). Taken from "Global
    Fissile Material Report 2010". Note that up to a burnup of ~1.25 MWd/kg,
    the Pu is weapongrade (Pu239 fraction > 93.8%).
    """
    df = pd.DataFrame(
        columns=["burnup", "fraction"],
        dtype=float,
        data=[
            [0.0, 0.0],
            [0.01328254870233883, 0.009873310098197585],
            [0.023329040607901163, 0.019133290497608257],
            [0.04383865759427982, 0.036624364585384095],
            [0.05539377747023923, 0.04747604152068585],
            [0.08040370840220919, 0.06883643315427412],
            [0.09433424313484284, 0.08119729817630872],
            [0.1183751073181358, 0.10183995303935345],
            [0.1306334012480939, 0.11194839088392317],
            [0.15775285434205978, 0.1350017631876701],
            [0.17168338907469342, 0.1473626282097047],
            [0.19488813285664867, 0.16657436072728427],
            [0.21035796204461872, 0.17964592739705187],
            [0.23426587988057258, 0.19926130008588783],
            [0.249032535014544, 0.2123091232161698],
            [0.2736436269044965, 0.2318690943128725],
            [0.2884102820384679, 0.2446953110746215],
            [0.31218525352708264, 0.26408116288176253],
            [0.3270848550083932, 0.27670424047235653],
            [0.3509927728443471, 0.2955809252660828],
            [0.36492330757698073, 0.3083359114093749],
            [0.390370519868271, 0.32731812304525953],
            [0.40430105460090465, 0.3388163061326481],
            [0.4297482668921949, 0.3587387402979607],
            [0.44535104242750424, 0.3713670942306626],
            [0.46912601391611895, 0.390080212419043],
            [0.48506462580675486, 0.40351306195814507],
            [0.514129153372032, 0.426176987864894],
            [0.5267862863440075, 0.43544299278931975],
            [0.5478815079639668, 0.45205085047663784],
            [0.563351337151937, 0.46441011096183527],
            [0.588665603095888, 0.48323403233448214],
            [0.6034322582298595, 0.4954270880432803],
            [0.6288794705211498, 0.5145818144318894],
            [0.6428100052537834, 0.5257238444269932],
            [0.6688274452517331, 0.5452901255000207],
            [0.6835941003857047, 0.5564558990346099],
            [0.7090413126769948, 0.5751278401203441],
            [0.7221357270082907, 0.5851080412174866],
            [0.7489892874075782, 0.6054404255303808],
            [0.762919822140212, 0.6153177379564188],
            [0.7892031548328399, 0.6348824144926096],
            [0.8030007432181345, 0.6447755559449715],
            [0.8299872499647612, 0.6647201291129329],
            [0.843081664296057, 0.6743441771177906],
            [0.8707713450966825, 0.6943204083383996],
            [0.8838657594279783, 0.7039444563432572],
            [0.9101490921206063, 0.7229709459844396],
            [0.9239466805059009, 0.7328640874368013],
            [0.9509331872525275, 0.7522546446834306],
            [0.9647307756378221, 0.7619103507409356],
            [0.9894748138751137, 0.780140112723821],
            [1.0097339150937352, 0.7929194133092187],
            [1.0325013775163702, 0.8098723005019859],
            [1.0462989659016644, 0.8193697162962532],
            [1.073285472648291, 0.838443693016407],
            [1.0870830610335856, 0.8478619636790554],
            [1.1140695677802123, 0.8667776501359713],
            [1.127867156165507, 0.8761167756670009],
            [1.1548536629121336, 0.8947950267290601],
            [1.1686512512974282, 0.9041341522600895],
            [1.1956377580440549, 0.9227332581905299],
            [1.2094353464293495, 0.9319932385899405],
            [1.2378282012839732, 0.9509880701784753],
            [1.2516257896692682, 0.9601689054462671],
            [1.2786122964158944, 0.9783722857186129],
            [1.2924098848011895, 0.9876322661180236],
            [1.3193963915478157, 1.0059147915219881],
            [1.3331939799331103, 1.0149373365265424],
            [1.361586834787734, 1.0336947327202204],
            [1.3762205435743667, 1.0435150390172883],
            [1.4023709299196553, 1.060287496944169],
            [1.4161685183049503, 1.0694683322119607],
            [1.444561373159574, 1.0877508576159256],
            [1.4583589615448686, 1.0965359672256227],
            [1.4852176184634955, 1.114132568155557],
            [1.5295124873460704, 1.142281853301344],
            [1.5435759684260433, 1.1510054055864487],
            [1.5683200066633349, 1.1673708600245336],
            [1.5821175950486295, 1.175997679370993],
            [1.6105104499032532, 1.194201059643339],
            [1.6243080382885482, 1.2027487338581795],
            [1.6518647727418343, 1.2201606628143364],
            [1.6664984815284665, 1.2287083370291771],
            [1.6940552159817526, 1.2462785562485716],
            [1.7086889247683853, 1.255063665858269],
            [1.7348393111136738, 1.2718424337614747],
            [1.7503091403016438, 1.2803109628446965],
            [1.7778658747549298, 1.2979603271957099],
            [1.7924995835415625, 1.3064288562789317],
            [1.8208924383961862, 1.3239199303667075],
            [1.8346900267814808, 1.3322301691866913],
            [1.8614106408334292, 1.3491672273531348],
            [1.8768804700213996, 1.3577149015679755],
            [1.9044372044746856, 1.3744145243395622],
            [1.9190709132613179, 1.3830413436860218],
            [1.9466276477146039, 1.3996618213259897],
            [1.9612613565012366, 1.4082094955408304],
            [1.9857859531772574, 1.423395445134576],
        ],
    )
    return df


def natural_u_production_df(current_production=45000):
    """Natural uranium production of Pakistan according to OECD's Red Book.

    All masses are given in kg per year. Missing years mean that the values
    remain unchanged w.r.t. the previous year.

    Parameters
    ----------
    current_production : float, optional
        Yearly natural uranium production from 2010 onwards in units of kg.
        Must be larger than 1000.
    """
    if current_production < 1000:
        raise ValueError("`current_production` must be larger than 1000 (kg).")

    df = pd.DataFrame(
        columns=["year", "mass"],
        dtype=float,
        data=[
            [1983, 23e3],
            [1990, 30e3],
            [1991, 30e3],
            [1992, 23e3],
            [2001, 46e3],
            [2002, 38e3],
            [2003, 40e3],
            [2004, 38e3],
            [2005, 40e3],
            [2008, 45e3],
            [2009, 50e3],
            [2010, current_production],
        ],
    )
    return df


def swu_df(second_increase=None, third_increase=None):
    """Available SWU per year. according to Mian et al.

    All values in kgSWU/year and in all time spans the lower boundary is
    inclusive and the upper boundary is exclusive.

    Parameters
    ----------
    second_increase : float
        Determines the SWU from 1999 to 2022. It must be larger or equal to
        15000 kgSWU/year.

    third_increase : float or None
        Determines the SWU from 2022 to 2041. It must be larger or equal to
        `second_increase`. If it is None, it is set equal to `second_increase`.
    """
    first_increase = 9000

    if second_increase < 15000:
        msg = "`second_increase` should be larger or equal to 15000."
        raise ValueError(msg)

    if third_increase is None:
        third_increase = second_increase
    elif third_increase < second_increase:
        msg = "`third_increase` must be larger or equal to `second_increase`."
        raise ValueError(msg)

    df = pd.DataFrame(
        columns=["year", "swu"],
        dtype=float,
        data=[[1983, 3000]]
        + [
            [year, swu]
            for year, swu in zip(
                range(1985, 1990), np.linspace(3000, first_increase, 1990 - 1985)
            )
        ]
        + [[1990, first_increase], [1999, second_increase], [2022, third_increase]],
    )
    return df
